# .github/workflows/release.yml
name: Build and Release Stable

on:
  push:
    branches: [ main ]

permissions:
  contents: write

jobs:
  build:
    if: contains(toJson(github.event.head_commit.message), 'stable release')
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          - { goos: linux,  goarch: amd64 }
          - { goos: linux,  goarch: arm64 }
          - { goos: linux,  goarch: 386 }
          - { goos: linux,  goarch: arm }
          - { goos: darwin, goarch: amd64 }
          - { goos: darwin, goarch: arm64 }
          - { goos: freebsd, goarch: amd64 }
          - { goos: openbsd, goarch: amd64 }
          - { goos: netbsd, goarch: amd64 }

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Уникальный каталог для модулей — зависит от GOOS/GOARCH
      - name: Define isolated Go module cache
        run: |
          echo "GOMODCACHE=$HOME/.gomodcache-${{ matrix.goos }}-${{ matrix.goarch }}" >> $GITHUB_ENV

      # ⚠️ Подготавливаем/очищаем каталог, иначе tar => exit 2
      - name: Prepare module cache dir
        run: |
          rm -rf "$GOMODCACHE" || true
          mkdir -p "$GOMODCACHE"

      - name: Init go.mod if absent
        run: |
          test -f go.mod || go mod init postgresql-backup

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"
          cache: true
          cache-dependency-path: go.sum

      - name: Build ${{ matrix.goos }}/${{ matrix.goarch }} (static)
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
          VERSION: ${{ github.sha }}
        run: |
          mkdir -p dist
          GOFLAGS="-trimpath" \
          go build -tags netgo,osusergo \
                   -ldflags "-s -w -X main.version=$VERSION" \
                   -o "dist/postgresql-backup_${GOOS}_${GOARCH}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bin-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist-raw/

      - name: Publish GitHub Release (tag latest)
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: latest
          name: "Latest Stable Release"
          prerelease: false
          files: dist-raw/**/*

